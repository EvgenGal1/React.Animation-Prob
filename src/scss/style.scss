* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

// ReactTransitionGroup =======================================================================================
.ReactTransitionGroup {
  // width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  .wrap {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 90vh;
    height: 300px;
  }
  .circle {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    border: 3px dashed #000;
    // 2ую аним не присвоить, можно через 2ой класс(.rotate. Сложнее)
    // animation: show-loader 0.5s forwards; // до Transition
  }
  // 2ая аним. раб ток одна. до Transition
  // .rotate {
  //   animation: rotate-loader 0.5s forwards;
  //   animation-delay: 5s;
  // }
  // аним. хука Transition
  // вход
  .circle {
    &.entering,
    &-enter-active,
    &-show {
      animation: show-loader 0.5s forwards;
      background: red;
    }
  }
  // введено
  .circle {
    &.entered,
    &-enter-done,
    &-rotate {
      animation: rotate-loader 0.5s infinite;
      background: orange;
    }
  }
  // выход
  .circle {
    &.exiting,
    &-exit-active,
    &-hide {
      animation: show-loader 0.5s reverse;
      background: yellow;
    }
  }
  // вышел
  .circle {
    &-exited {
      background: green;
    }
  }

  // .CSSTransitionComp,
  // .TransitionComp
  & > div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
  .CSSTransitionComp,
  .SwitchTransitionComp {
    .wrap {
      height: calc(300px - 40.67px);
    }
  }
  .SwitchTransitionComp {
    .wrap {
      display: block;
    }
    // видео
    input {
      padding: 20px;
    }
    // .fade-enter-active {
    .fade.enter-active {
      animation: fade-in 500ms forwards;
    }
    // .fade-exit-active {
    .fade.exit-active {
      animation: fade-out 500ms forwards;
    }
    @keyframes fade-in {
      0% {
        opacity: 0;
        transform: translateX(-150px);
      }
      100% {
        opacity: 1;
        transform: translateX(0px);
      }
    }
    @keyframes fade-out {
      0% {
        opacity: 1;
        transform: translateX(0px);
      }
      100% {
        opacity: 0;
        transform: translateX(150px);
      }
    }

    // доки
    .label {
      margin-bottom: 0.5rem;
    }

    .modes {
      margin-bottom: 1rem;
    }

    .button-container {
      margin-bottom: 0.5rem;
    }

    .fade-enter .btn {
      opacity: 0;
      transform: translateX(-100%);
    }
    .fade-enter-active .btn {
      opacity: 1;
      transform: translateX(0%);
    }
    .fade-exit .btn {
      opacity: 1;
      transform: translateX(0%);
    }
    .fade-exit-active .btn {
      opacity: 0;
      transform: translateX(100%);
    }
    .fade-enter-active .btn,
    .fade-exit-active .btn {
      transition: opacity 500ms, transform 500ms;
    }
    [type="radio"]:not(:checked),
    [type="radio"]:checked {
      position: relative;
      opacity: 1;
      pointer-events: fill;
    }
  }
  //  ----------------------------------------------------------------------------------
  .circle-enter {
    opacity: 0;
  }
  .circle-enter-active {
    opacity: 1;
    transition: opacity 200ms;
  }
  .circle-exit {
    opacity: 1;
  }
  .circle-exit-active {
    opacity: 0;
    transition: opacity 200ms;
  }
  //  ----------------------------------------------------------------------------------
  @keyframes show-loader {
    0% {
      opacity: 0;
      transform: translateY(-100px);
    }
    50% {
      opacity: 1;
    }
    100% {
      transform: translateY(0px);
    }
  }

  @keyframes rotate-loader {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
}

// Footer =======================================================================================

body {
  display: flex;
  min-height: 100vh;
  flex-direction: column;
}

main {
  flex: 1 0 auto;
}
.page-footer {
  p {
    margin-block-end: 0.5em;
  }
}
